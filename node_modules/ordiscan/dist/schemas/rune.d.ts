import { z } from "zod";
export declare const RuneBaseSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    formatted_name: z.ZodString;
    spacers: z.ZodNumber;
    number: z.ZodNumber;
    inscription_id: z.ZodNullable<z.ZodString>;
    decimals: z.ZodNumber;
    mint_count_cap: z.ZodString;
    symbol: z.ZodNullable<z.ZodString>;
    etching_txid: z.ZodNullable<z.ZodString>;
    amount_per_mint: z.ZodString;
    timestamp_unix: z.ZodNullable<z.ZodString>;
    premined_supply: z.ZodString;
    mint_start_block: z.ZodNullable<z.ZodNumber>;
    mint_end_block: z.ZodNullable<z.ZodNumber>;
}, "strict", z.ZodTypeAny, {
    number: number;
    symbol: string | null;
    inscription_id: string | null;
    name: string;
    id: string;
    formatted_name: string;
    spacers: number;
    decimals: number;
    mint_count_cap: string;
    etching_txid: string | null;
    amount_per_mint: string;
    timestamp_unix: string | null;
    premined_supply: string;
    mint_start_block: number | null;
    mint_end_block: number | null;
}, {
    number: number;
    symbol: string | null;
    inscription_id: string | null;
    name: string;
    id: string;
    formatted_name: string;
    spacers: number;
    decimals: number;
    mint_count_cap: string;
    etching_txid: string | null;
    amount_per_mint: string;
    timestamp_unix: string | null;
    premined_supply: string;
    mint_start_block: number | null;
    mint_end_block: number | null;
}>;
export type Rune = z.infer<typeof RuneBaseSchema>;
export declare const RuneWithSupplySchema: z.ZodObject<z.objectUtil.extendShape<{
    id: z.ZodString;
    name: z.ZodString;
    formatted_name: z.ZodString;
    spacers: z.ZodNumber;
    number: z.ZodNumber;
    inscription_id: z.ZodNullable<z.ZodString>;
    decimals: z.ZodNumber;
    mint_count_cap: z.ZodString;
    symbol: z.ZodNullable<z.ZodString>;
    etching_txid: z.ZodNullable<z.ZodString>;
    amount_per_mint: z.ZodString;
    timestamp_unix: z.ZodNullable<z.ZodString>;
    premined_supply: z.ZodString;
    mint_start_block: z.ZodNullable<z.ZodNumber>;
    mint_end_block: z.ZodNullable<z.ZodNumber>;
}, {
    current_supply: z.ZodString;
    current_mint_count: z.ZodNumber;
}>, "strict", z.ZodTypeAny, {
    number: number;
    symbol: string | null;
    inscription_id: string | null;
    name: string;
    id: string;
    formatted_name: string;
    spacers: number;
    decimals: number;
    mint_count_cap: string;
    etching_txid: string | null;
    amount_per_mint: string;
    timestamp_unix: string | null;
    premined_supply: string;
    mint_start_block: number | null;
    mint_end_block: number | null;
    current_supply: string;
    current_mint_count: number;
}, {
    number: number;
    symbol: string | null;
    inscription_id: string | null;
    name: string;
    id: string;
    formatted_name: string;
    spacers: number;
    decimals: number;
    mint_count_cap: string;
    etching_txid: string | null;
    amount_per_mint: string;
    timestamp_unix: string | null;
    premined_supply: string;
    mint_start_block: number | null;
    mint_end_block: number | null;
    current_supply: string;
    current_mint_count: number;
}>;
export type RuneWithSupply = z.infer<typeof RuneWithSupplySchema>;
export declare const RuneMarketInfoSchema: z.ZodObject<{
    price_in_sats: z.ZodNumber;
    price_in_usd: z.ZodNumber;
    market_cap_in_btc: z.ZodNumber;
    market_cap_in_usd: z.ZodNumber;
}, "strict", z.ZodTypeAny, {
    price_in_sats: number;
    price_in_usd: number;
    market_cap_in_btc: number;
    market_cap_in_usd: number;
}, {
    price_in_sats: number;
    price_in_usd: number;
    market_cap_in_btc: number;
    market_cap_in_usd: number;
}>;
export type RuneMarketInfo = z.infer<typeof RuneMarketInfoSchema>;
export declare const RuneNameSchema: z.ZodObject<{
    name: z.ZodString;
    status: z.ZodEnum<["ETCHED", "AVAILABLE", "LOCKED", "RESERVED"]>;
    unlock_block_height: z.ZodNumber;
    unlock_block_timestamp: z.ZodString;
}, "strict", z.ZodTypeAny, {
    status: "ETCHED" | "AVAILABLE" | "LOCKED" | "RESERVED";
    name: string;
    unlock_block_height: number;
    unlock_block_timestamp: string;
}, {
    status: "ETCHED" | "AVAILABLE" | "LOCKED" | "RESERVED";
    name: string;
    unlock_block_height: number;
    unlock_block_timestamp: string;
}>;
export type RuneName = z.infer<typeof RuneNameSchema>;
export declare const RuneBalanceSchema: z.ZodObject<{
    name: z.ZodString;
    balance: z.ZodString;
}, "strip", z.ZodTypeAny, {
    balance: string;
    name: string;
}, {
    balance: string;
    name: string;
}>;
export type RuneBalance = z.infer<typeof RuneBalanceSchema>;
//# sourceMappingURL=rune.d.ts.map