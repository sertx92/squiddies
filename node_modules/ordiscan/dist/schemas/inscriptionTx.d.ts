import { z } from "zod";
export declare const InscriptionTransferSchema: z.ZodObject<{
    from_address: z.ZodString;
    to_address: z.ZodString;
    inscription_id: z.ZodString;
    spent_as_fee: z.ZodBoolean;
    txid: z.ZodString;
    confirmed: z.ZodBoolean;
    timestamp: z.ZodString;
}, "strip", z.ZodTypeAny, {
    from_address: string;
    to_address: string;
    inscription_id: string;
    timestamp: string;
    spent_as_fee: boolean;
    txid: string;
    confirmed: boolean;
}, {
    from_address: string;
    to_address: string;
    inscription_id: string;
    timestamp: string;
    spent_as_fee: boolean;
    txid: string;
    confirmed: boolean;
}>;
export type InscriptionTransfer = z.infer<typeof InscriptionTransferSchema>;
export declare const InscriptionActivitySchema: z.ZodObject<{
    txid: z.ZodString;
    type: z.ZodEnum<["INSCRIBE", "RECEIVE", "SEND"]>;
    inscription_id: z.ZodString;
    counterpart_address: z.ZodNullable<z.ZodString>;
    spent_as_fee: z.ZodBoolean;
    confirmed: z.ZodBoolean;
    timestamp: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: "INSCRIBE" | "RECEIVE" | "SEND";
    inscription_id: string;
    timestamp: string;
    spent_as_fee: boolean;
    txid: string;
    confirmed: boolean;
    counterpart_address: string | null;
}, {
    type: "INSCRIBE" | "RECEIVE" | "SEND";
    inscription_id: string;
    timestamp: string;
    spent_as_fee: boolean;
    txid: string;
    confirmed: boolean;
    counterpart_address: string | null;
}>;
export type InscriptionActivity = z.infer<typeof InscriptionActivitySchema>;
//# sourceMappingURL=inscriptionTx.d.ts.map