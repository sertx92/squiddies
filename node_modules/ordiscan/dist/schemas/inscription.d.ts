import { z } from "zod";
export declare const InscriptionTraitSchema: z.ZodObject<{
    name: z.ZodString;
    value: z.ZodString;
    rarity: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    value: string;
    name: string;
    rarity: number;
}, {
    value: string;
    name: string;
    rarity: number;
}>;
export type InscriptionTrait = z.infer<typeof InscriptionTraitSchema>;
export declare const InscriptionSchema: z.ZodObject<{
    inscription_id: z.ZodString;
    inscription_number: z.ZodNumber;
    content_type: z.ZodString;
    owner_address: z.ZodString;
    owner_output: z.ZodString;
    timestamp: z.ZodString;
    metadata: z.ZodNullable<z.ZodUnion<[z.ZodString, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodNumber]>>]>>;
    metaprotocol: z.ZodNullable<z.ZodString>;
    sat: z.ZodNumber;
    content_url: z.ZodString;
    parent_inscription_id: z.ZodNullable<z.ZodString>;
    delegate_inscription_id: z.ZodNullable<z.ZodString>;
    satributes: z.ZodArray<z.ZodEnum<["UNCOMMON", "RARE", "EPIC", "LEGENDARY", "MYTHIC", "BLACK_UNCOMMON", "BLACK_RARE", "BLACK_EPIC", "BLACK_LEGENDARY", "BLACK_MYTHIC", "BLOCK_9", "BLOCK_78", "NAKAMOTO", "FIRST_TX", "VINTAGE", "PIZZA", "HITMAN", "PALINDROME", "ALPHA", "OMEGA"]>, "many">;
    submodules: z.ZodArray<z.ZodString, "many">;
    genesis_address: z.ZodString;
    genesis_output: z.ZodString;
    collection_slug: z.ZodNullable<z.ZodString>;
    sats_name: z.ZodNullable<z.ZodString>;
    brc20_action: z.ZodNullable<z.ZodObject<{
        tick: z.ZodString;
        type: z.ZodEnum<["TRANSFER", "MINT", "DEPLOY"]>;
    }, "strip", z.ZodTypeAny, {
        tick: string;
        type: "TRANSFER" | "MINT" | "DEPLOY";
    }, {
        tick: string;
        type: "TRANSFER" | "MINT" | "DEPLOY";
    }>>;
}, "strict", z.ZodTypeAny, {
    inscription_id: string;
    timestamp: string;
    satributes: ("UNCOMMON" | "RARE" | "EPIC" | "LEGENDARY" | "MYTHIC" | "BLACK_UNCOMMON" | "BLACK_RARE" | "BLACK_EPIC" | "BLACK_LEGENDARY" | "BLACK_MYTHIC" | "BLOCK_9" | "BLOCK_78" | "NAKAMOTO" | "FIRST_TX" | "VINTAGE" | "PIZZA" | "HITMAN" | "PALINDROME" | "ALPHA" | "OMEGA")[];
    inscription_number: number;
    content_type: string;
    owner_address: string;
    owner_output: string;
    metadata: string | Record<string, string | number> | null;
    metaprotocol: string | null;
    sat: number;
    content_url: string;
    parent_inscription_id: string | null;
    delegate_inscription_id: string | null;
    submodules: string[];
    genesis_address: string;
    genesis_output: string;
    collection_slug: string | null;
    sats_name: string | null;
    brc20_action: {
        tick: string;
        type: "TRANSFER" | "MINT" | "DEPLOY";
    } | null;
}, {
    inscription_id: string;
    timestamp: string;
    satributes: ("UNCOMMON" | "RARE" | "EPIC" | "LEGENDARY" | "MYTHIC" | "BLACK_UNCOMMON" | "BLACK_RARE" | "BLACK_EPIC" | "BLACK_LEGENDARY" | "BLACK_MYTHIC" | "BLOCK_9" | "BLOCK_78" | "NAKAMOTO" | "FIRST_TX" | "VINTAGE" | "PIZZA" | "HITMAN" | "PALINDROME" | "ALPHA" | "OMEGA")[];
    inscription_number: number;
    content_type: string;
    owner_address: string;
    owner_output: string;
    metadata: string | Record<string, string | number> | null;
    metaprotocol: string | null;
    sat: number;
    content_url: string;
    parent_inscription_id: string | null;
    delegate_inscription_id: string | null;
    submodules: string[];
    genesis_address: string;
    genesis_output: string;
    collection_slug: string | null;
    sats_name: string | null;
    brc20_action: {
        tick: string;
        type: "TRANSFER" | "MINT" | "DEPLOY";
    } | null;
}>;
export type Inscription = z.infer<typeof InscriptionSchema>;
//# sourceMappingURL=inscription.d.ts.map