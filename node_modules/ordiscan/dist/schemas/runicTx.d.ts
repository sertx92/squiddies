import { z } from "zod";
export declare const RunestoneMessageSchema: z.ZodObject<{
    rune: z.ZodString;
    type: z.ZodEnum<["TRANSFER", "MINT", "ETCH"]>;
}, "strip", z.ZodTypeAny, {
    type: "TRANSFER" | "MINT" | "ETCH";
    rune: string;
}, {
    type: "TRANSFER" | "MINT" | "ETCH";
    rune: string;
}>;
export type RunestoneMessage = z.infer<typeof RunestoneMessageSchema>;
export declare const RunicInputSchema: z.ZodObject<{
    address: z.ZodString;
    output: z.ZodString;
    rune: z.ZodString;
    rune_amount: z.ZodString;
}, "strip", z.ZodTypeAny, {
    rune: string;
    address: string;
    output: string;
    rune_amount: string;
}, {
    rune: string;
    address: string;
    output: string;
    rune_amount: string;
}>;
export type RunicInput = z.infer<typeof RunicInputSchema>;
export declare const RunicOutputSchema: z.ZodObject<{
    address: z.ZodString;
    vout: z.ZodNumber;
    rune: z.ZodString;
    rune_amount: z.ZodString;
}, "strip", z.ZodTypeAny, {
    rune: string;
    address: string;
    rune_amount: string;
    vout: number;
}, {
    rune: string;
    address: string;
    rune_amount: string;
    vout: number;
}>;
export type RunicOutput = z.infer<typeof RunicOutputSchema>;
export declare const RunicTxSchema: z.ZodObject<{
    txid: z.ZodString;
    runestone_messages: z.ZodArray<z.ZodObject<{
        rune: z.ZodString;
        type: z.ZodEnum<["TRANSFER", "MINT", "ETCH"]>;
    }, "strip", z.ZodTypeAny, {
        type: "TRANSFER" | "MINT" | "ETCH";
        rune: string;
    }, {
        type: "TRANSFER" | "MINT" | "ETCH";
        rune: string;
    }>, "many">;
    inputs: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        output: z.ZodString;
        rune: z.ZodString;
        rune_amount: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        rune: string;
        address: string;
        output: string;
        rune_amount: string;
    }, {
        rune: string;
        address: string;
        output: string;
        rune_amount: string;
    }>, "many">;
    outputs: z.ZodArray<z.ZodObject<{
        address: z.ZodString;
        vout: z.ZodNumber;
        rune: z.ZodString;
        rune_amount: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        rune: string;
        address: string;
        rune_amount: string;
        vout: number;
    }, {
        rune: string;
        address: string;
        rune_amount: string;
        vout: number;
    }>, "many">;
    timestamp: z.ZodString;
}, "strip", z.ZodTypeAny, {
    timestamp: string;
    txid: string;
    runestone_messages: {
        type: "TRANSFER" | "MINT" | "ETCH";
        rune: string;
    }[];
    inputs: {
        rune: string;
        address: string;
        output: string;
        rune_amount: string;
    }[];
    outputs: {
        rune: string;
        address: string;
        rune_amount: string;
        vout: number;
    }[];
}, {
    timestamp: string;
    txid: string;
    runestone_messages: {
        type: "TRANSFER" | "MINT" | "ETCH";
        rune: string;
    }[];
    inputs: {
        rune: string;
        address: string;
        output: string;
        rune_amount: string;
    }[];
    outputs: {
        rune: string;
        address: string;
        rune_amount: string;
        vout: number;
    }[];
}>;
export type RunicTx = z.infer<typeof RunicTxSchema>;
//# sourceMappingURL=runicTx.d.ts.map