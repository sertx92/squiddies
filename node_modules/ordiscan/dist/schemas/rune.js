"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RuneBalanceSchema = exports.RuneNameSchema = exports.RuneMarketInfoSchema = exports.RuneWithSupplySchema = exports.RuneBaseSchema = void 0;
const zod_1 = require("zod");
// When getting a list of runes:
exports.RuneBaseSchema = zod_1.z
    .object({
    id: zod_1.z.string(),
    name: zod_1.z.string(),
    formatted_name: zod_1.z.string(),
    spacers: zod_1.z.number(),
    number: zod_1.z.number(),
    inscription_id: zod_1.z.string().nullable(),
    decimals: zod_1.z.number(),
    mint_count_cap: zod_1.z.string(),
    symbol: zod_1.z.string().nullable(),
    etching_txid: zod_1.z.string().nullable(),
    amount_per_mint: zod_1.z.string(),
    timestamp_unix: zod_1.z.string().nullable(),
    premined_supply: zod_1.z.string(),
    mint_start_block: zod_1.z.number().nullable(),
    mint_end_block: zod_1.z.number().nullable(),
})
    .strict();
// When getting a specific rune:
exports.RuneWithSupplySchema = exports.RuneBaseSchema.extend({
    current_supply: zod_1.z.string(),
    current_mint_count: zod_1.z.number(),
});
exports.RuneMarketInfoSchema = zod_1.z
    .object({
    price_in_sats: zod_1.z.number(),
    price_in_usd: zod_1.z.number(),
    market_cap_in_btc: zod_1.z.number(),
    market_cap_in_usd: zod_1.z.number(),
})
    .strict();
exports.RuneNameSchema = zod_1.z
    .object({
    name: zod_1.z.string(),
    status: zod_1.z.enum(["ETCHED", "AVAILABLE", "LOCKED", "RESERVED"]),
    unlock_block_height: zod_1.z.number(),
    unlock_block_timestamp: zod_1.z.string(),
})
    .strict();
exports.RuneBalanceSchema = zod_1.z.object({
    name: zod_1.z.string(),
    balance: zod_1.z.string(),
});
//# sourceMappingURL=rune.js.map