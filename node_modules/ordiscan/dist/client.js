"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Ordiscan = void 0;
const address_1 = require("./resources/address");
const brc20_1 = require("./resources/brc20");
const collection_1 = require("./resources/collection");
const inscription_1 = require("./resources/inscription");
const rune_1 = require("./resources/rune");
const sat_1 = require("./resources/sat");
const tx_1 = require("./resources/tx");
const utxo_1 = require("./resources/utxo");
const types_1 = require("./types");
const DEFAULT_BASE_URL = "https://api.ordiscan.com";
class Ordiscan {
    constructor(apiKey, config) {
        this.auth = apiKey;
        this.baseUrl = (config === null || config === void 0 ? void 0 : config.baseUrl) || DEFAULT_BASE_URL;
        this.version = (config === null || config === void 0 ? void 0 : config.version) || "v1";
        // Initialize resources
        this.address = new address_1.AddressResource(this);
        this.tx = new tx_1.TxResource(this);
        this.inscription = new inscription_1.InscriptionResource(this);
        this.rune = new rune_1.RuneResource(this);
        this.sat = new sat_1.SatResource(this);
        this.brc20 = new brc20_1.Brc20Resource(this);
        this.collection = new collection_1.CollectionResource(this);
        this.utxo = new utxo_1.UtxoResource(this);
    }
    get apiUrl() {
        return `${this.baseUrl}/${this.version}`;
    }
    async fetch(endpoint, options = {}) {
        const url = `${this.apiUrl}${endpoint}`;
        const headers = {
            Authorization: `Bearer ${this.auth}`,
            "Content-Type": "application/json",
            ...options.headers,
        };
        if (process.env.NODE_ENV === "test") {
            const isMock = !process.env.SKIP_MOCKS;
            console.log(`➡️${isMock ? "(mocked)" : "(real)"} ${options.method || "GET"}`, url);
        }
        const response = await fetch(url, {
            ...options,
            headers,
        });
        if (!response.ok) {
            const err = await response.json().catch(() => null);
            throw new types_1.OrdiscanError((err === null || err === void 0 ? void 0 : err.error.message) || "Request failed!", response.status);
        }
        const json = await response.json();
        return json.data;
    }
}
exports.Ordiscan = Ordiscan;
//# sourceMappingURL=client.js.map